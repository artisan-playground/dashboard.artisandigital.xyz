generator prisma_client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int             @id @default(autoincrement())
  email     String          @unique
  name      String?
  image     String?
  position  String?
  skills    String[]
  contacts  Contact         @relation(fields: [contactId], references: [id])
  contactId Int
  comments  CommentOnUser[]
  projects  ProjectOnUser[]
  tasks     TaskOnUser[]
  role      Role            @default(USER)
}

model Contact {
  id        Int     @id @default(autoincrement())
  facebook  String?
  twitter   String?
  instagram String?
  gitlab    String?
  github    String?
  User      User[]
}

model Project {
  id            Int             @id @default(autoincrement())
  projectName   String?
  projectType   String?
  projectDetail String?
  projectImage  String?
  status        String?         @default(value: "undone")
  dueDate       DateTime
  members       ProjectOnUser[]
  tasks         Task[]
}

model ProjectOnUser {
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  project   Project  @relation(fields: [projectId], references: [id])
  projectId Int
  createdAt DateTime @default(now())
  @@id([userId, projectId])
}

model Task {
  id         Int             @id @default(autoincrement())
  project    Project         @relation(fields: [projectId], references: [id])
  projectId  Int
  taskName   String?
  startTime  DateTime        @default(now())
  endTime    DateTime        @default(now())
  taskDetail String?
  isDone     Boolean
  members    TaskOnUser[]
  files      FileOnTask[]
  comments   CommentOnTask[]
}

model TaskOnUser {
  user     User     @relation(fields: [userId], references: [id])
  userId   Int
  task     Task     @relation(fields: [taskId], references: [id])
  taskId   Int
  cretedAt DateTime @default(now())
  @@id([userId, taskId])
}

model File {
  task   FileOnTask
  id     Int        @id @default(autoincrement())
  url    String?
  name   String?
  status String?
}

model FileOnTask {
  task     Task     @relation(fields: [taskId], references: [id])
  taskId   Int
  file     File     @relation(fields: [fileId], references: [id])
  fileId   Int
  cretedAt DateTime @default(now())
  @@id([taskId, fileId])
}

model Comment {
  id        Int             @id @default(autoincrement())
  users     CommentOnUser[]
  task      CommentOnTask
  timestamp DateTime        @default(now())
  image     String?
  message   String?
}

model CommentOnUser {
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId Int
  cretedAt  DateTime @default(now())
  @@id([userId, commentId])
}

model CommentOnTask {
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    Int
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId Int
  cretedAt  DateTime @default(now())
  @@id([taskId, commentId])
}

enum Role {
  ADMIN
  USER
}
