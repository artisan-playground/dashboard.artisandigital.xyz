### This file was generated by Nexus Schema
### Do not make changes to this file directly


input BoolFieldUpdateOperationsInput {
  set: Boolean
}

type Comment {
  id: Int!
  image: String
  message: String
  timestamp: DateTime!
}

input CommentCreateInput {
  image: String
  message: String
  task: CommentOnTaskCreateManyWithoutCommentInput
  timestamp: DateTime
  user: CommentOnUserCreateManyWithoutCommentInput
}

input CommentCreateOneWithoutTaskInput {
  connect: CommentWhereUniqueInput
  create: CommentCreateWithoutTaskInput
}

input CommentCreateOneWithoutUserInput {
  connect: CommentWhereUniqueInput
  create: CommentCreateWithoutUserInput
}

input CommentCreateWithoutTaskInput {
  image: String
  message: String
  timestamp: DateTime
  user: CommentOnUserCreateManyWithoutCommentInput
}

input CommentCreateWithoutUserInput {
  image: String
  message: String
  task: CommentOnTaskCreateManyWithoutCommentInput
  timestamp: DateTime
}

input CommentOnTaskCreateManyWithoutCommentInput {
  connect: [CommentOnTaskWhereUniqueInput!]
  create: [CommentOnTaskCreateWithoutCommentInput!]
}

input CommentOnTaskCreateManyWithoutTaskInput {
  connect: [CommentOnTaskWhereUniqueInput!]
  create: [CommentOnTaskCreateWithoutTaskInput!]
}

input CommentOnTaskCreateWithoutCommentInput {
  cretedAt: DateTime
  task: TaskCreateOneWithoutCommentsInput!
}

input CommentOnTaskCreateWithoutTaskInput {
  comment: CommentCreateOneWithoutTaskInput!
  cretedAt: DateTime
}

input CommentOnTaskScalarWhereInput {
  AND: [CommentOnTaskScalarWhereInput!]
  commentId: IntFilter
  cretedAt: DateTimeFilter
  NOT: [CommentOnTaskScalarWhereInput!]
  OR: [CommentOnTaskScalarWhereInput!]
  taskId: IntFilter
}

input CommentOnTaskUpdateManyDataInput {
  cretedAt: DateTimeFieldUpdateOperationsInput
}

input CommentOnTaskUpdateManyWithoutCommentInput {
  connect: [CommentOnTaskWhereUniqueInput!]
  create: [CommentOnTaskCreateWithoutCommentInput!]
  delete: [CommentOnTaskWhereUniqueInput!]
  deleteMany: [CommentOnTaskScalarWhereInput!]
  disconnect: [CommentOnTaskWhereUniqueInput!]
  set: [CommentOnTaskWhereUniqueInput!]
  update: [CommentOnTaskUpdateWithWhereUniqueWithoutCommentInput!]
  updateMany: [CommentOnTaskUpdateManyWithWhereNestedInput!]
  upsert: [CommentOnTaskUpsertWithWhereUniqueWithoutCommentInput!]
}

input CommentOnTaskUpdateManyWithoutTaskInput {
  connect: [CommentOnTaskWhereUniqueInput!]
  create: [CommentOnTaskCreateWithoutTaskInput!]
  delete: [CommentOnTaskWhereUniqueInput!]
  deleteMany: [CommentOnTaskScalarWhereInput!]
  disconnect: [CommentOnTaskWhereUniqueInput!]
  set: [CommentOnTaskWhereUniqueInput!]
  update: [CommentOnTaskUpdateWithWhereUniqueWithoutTaskInput!]
  updateMany: [CommentOnTaskUpdateManyWithWhereNestedInput!]
  upsert: [CommentOnTaskUpsertWithWhereUniqueWithoutTaskInput!]
}

input CommentOnTaskUpdateManyWithWhereNestedInput {
  data: CommentOnTaskUpdateManyDataInput!
  where: CommentOnTaskScalarWhereInput!
}

input CommentOnTaskUpdateWithoutCommentDataInput {
  cretedAt: DateTimeFieldUpdateOperationsInput
  task: TaskUpdateOneRequiredWithoutCommentsInput
}

input CommentOnTaskUpdateWithoutTaskDataInput {
  comment: CommentUpdateOneRequiredWithoutTaskInput
  cretedAt: DateTimeFieldUpdateOperationsInput
}

input CommentOnTaskUpdateWithWhereUniqueWithoutCommentInput {
  data: CommentOnTaskUpdateWithoutCommentDataInput!
  where: CommentOnTaskWhereUniqueInput!
}

input CommentOnTaskUpdateWithWhereUniqueWithoutTaskInput {
  data: CommentOnTaskUpdateWithoutTaskDataInput!
  where: CommentOnTaskWhereUniqueInput!
}

input CommentOnTaskUpsertWithWhereUniqueWithoutCommentInput {
  create: CommentOnTaskCreateWithoutCommentInput!
  update: CommentOnTaskUpdateWithoutCommentDataInput!
  where: CommentOnTaskWhereUniqueInput!
}

input CommentOnTaskUpsertWithWhereUniqueWithoutTaskInput {
  create: CommentOnTaskCreateWithoutTaskInput!
  update: CommentOnTaskUpdateWithoutTaskDataInput!
  where: CommentOnTaskWhereUniqueInput!
}

input CommentOnTaskWhereUniqueInput {
  taskId_commentId: TaskIdCommentIdCompoundUniqueInput
}

input CommentOnUserCreateManyWithoutCommentInput {
  connect: [CommentOnUserWhereUniqueInput!]
  create: [CommentOnUserCreateWithoutCommentInput!]
}

input CommentOnUserCreateManyWithoutUserInput {
  connect: [CommentOnUserWhereUniqueInput!]
  create: [CommentOnUserCreateWithoutUserInput!]
}

input CommentOnUserCreateWithoutCommentInput {
  cretedAt: DateTime
  user: UserCreateOneWithoutCommentsInput!
}

input CommentOnUserCreateWithoutUserInput {
  comment: CommentCreateOneWithoutUserInput!
  cretedAt: DateTime
}

input CommentOnUserScalarWhereInput {
  AND: [CommentOnUserScalarWhereInput!]
  commentId: IntFilter
  cretedAt: DateTimeFilter
  NOT: [CommentOnUserScalarWhereInput!]
  OR: [CommentOnUserScalarWhereInput!]
  userId: IntFilter
}

input CommentOnUserUpdateManyDataInput {
  cretedAt: DateTimeFieldUpdateOperationsInput
}

input CommentOnUserUpdateManyWithoutCommentInput {
  connect: [CommentOnUserWhereUniqueInput!]
  create: [CommentOnUserCreateWithoutCommentInput!]
  delete: [CommentOnUserWhereUniqueInput!]
  deleteMany: [CommentOnUserScalarWhereInput!]
  disconnect: [CommentOnUserWhereUniqueInput!]
  set: [CommentOnUserWhereUniqueInput!]
  update: [CommentOnUserUpdateWithWhereUniqueWithoutCommentInput!]
  updateMany: [CommentOnUserUpdateManyWithWhereNestedInput!]
  upsert: [CommentOnUserUpsertWithWhereUniqueWithoutCommentInput!]
}

input CommentOnUserUpdateManyWithoutUserInput {
  connect: [CommentOnUserWhereUniqueInput!]
  create: [CommentOnUserCreateWithoutUserInput!]
  delete: [CommentOnUserWhereUniqueInput!]
  deleteMany: [CommentOnUserScalarWhereInput!]
  disconnect: [CommentOnUserWhereUniqueInput!]
  set: [CommentOnUserWhereUniqueInput!]
  update: [CommentOnUserUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [CommentOnUserUpdateManyWithWhereNestedInput!]
  upsert: [CommentOnUserUpsertWithWhereUniqueWithoutUserInput!]
}

input CommentOnUserUpdateManyWithWhereNestedInput {
  data: CommentOnUserUpdateManyDataInput!
  where: CommentOnUserScalarWhereInput!
}

input CommentOnUserUpdateWithoutCommentDataInput {
  cretedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutCommentsInput
}

input CommentOnUserUpdateWithoutUserDataInput {
  comment: CommentUpdateOneRequiredWithoutUserInput
  cretedAt: DateTimeFieldUpdateOperationsInput
}

input CommentOnUserUpdateWithWhereUniqueWithoutCommentInput {
  data: CommentOnUserUpdateWithoutCommentDataInput!
  where: CommentOnUserWhereUniqueInput!
}

input CommentOnUserUpdateWithWhereUniqueWithoutUserInput {
  data: CommentOnUserUpdateWithoutUserDataInput!
  where: CommentOnUserWhereUniqueInput!
}

input CommentOnUserUpsertWithWhereUniqueWithoutCommentInput {
  create: CommentOnUserCreateWithoutCommentInput!
  update: CommentOnUserUpdateWithoutCommentDataInput!
  where: CommentOnUserWhereUniqueInput!
}

input CommentOnUserUpsertWithWhereUniqueWithoutUserInput {
  create: CommentOnUserCreateWithoutUserInput!
  update: CommentOnUserUpdateWithoutUserDataInput!
  where: CommentOnUserWhereUniqueInput!
}

input CommentOnUserWhereUniqueInput {
  userId_commentId: UserIdCommentIdCompoundUniqueInput
}

input CommentUpdateInput {
  image: NullableStringFieldUpdateOperationsInput
  message: NullableStringFieldUpdateOperationsInput
  task: CommentOnTaskUpdateManyWithoutCommentInput
  timestamp: DateTimeFieldUpdateOperationsInput
  user: CommentOnUserUpdateManyWithoutCommentInput
}

input CommentUpdateOneRequiredWithoutTaskInput {
  connect: CommentWhereUniqueInput
  create: CommentCreateWithoutTaskInput
  update: CommentUpdateWithoutTaskDataInput
  upsert: CommentUpsertWithoutTaskInput
}

input CommentUpdateOneRequiredWithoutUserInput {
  connect: CommentWhereUniqueInput
  create: CommentCreateWithoutUserInput
  update: CommentUpdateWithoutUserDataInput
  upsert: CommentUpsertWithoutUserInput
}

input CommentUpdateWithoutTaskDataInput {
  image: NullableStringFieldUpdateOperationsInput
  message: NullableStringFieldUpdateOperationsInput
  timestamp: DateTimeFieldUpdateOperationsInput
  user: CommentOnUserUpdateManyWithoutCommentInput
}

input CommentUpdateWithoutUserDataInput {
  image: NullableStringFieldUpdateOperationsInput
  message: NullableStringFieldUpdateOperationsInput
  task: CommentOnTaskUpdateManyWithoutCommentInput
  timestamp: DateTimeFieldUpdateOperationsInput
}

input CommentUpsertWithoutTaskInput {
  create: CommentCreateWithoutTaskInput!
  update: CommentUpdateWithoutTaskDataInput!
}

input CommentUpsertWithoutUserInput {
  create: CommentCreateWithoutUserInput!
  update: CommentUpdateWithoutUserDataInput!
}

input CommentWhereUniqueInput {
  id: Int
}

type Contact {
  facebook: String
  github: String
  gitlab: String
  id: Int!
  instagram: String
  twitter: String
}

input ContactCreateInput {
  facebook: String
  github: String
  gitlab: String
  instagram: String
  twitter: String
  User: UserCreateManyWithoutContactsInput
}

input ContactCreateOneWithoutUserInput {
  connect: ContactWhereUniqueInput
  create: ContactCreateWithoutUserInput
}

input ContactCreateWithoutUserInput {
  facebook: String
  github: String
  gitlab: String
  instagram: String
  twitter: String
}

input ContactUpdateInput {
  facebook: NullableStringFieldUpdateOperationsInput
  github: NullableStringFieldUpdateOperationsInput
  gitlab: NullableStringFieldUpdateOperationsInput
  instagram: NullableStringFieldUpdateOperationsInput
  twitter: NullableStringFieldUpdateOperationsInput
  User: UserUpdateManyWithoutContactsInput
}

input ContactUpdateOneRequiredWithoutUserInput {
  connect: ContactWhereUniqueInput
  create: ContactCreateWithoutUserInput
  update: ContactUpdateWithoutUserDataInput
  upsert: ContactUpsertWithoutUserInput
}

input ContactUpdateWithoutUserDataInput {
  facebook: NullableStringFieldUpdateOperationsInput
  github: NullableStringFieldUpdateOperationsInput
  gitlab: NullableStringFieldUpdateOperationsInput
  instagram: NullableStringFieldUpdateOperationsInput
  twitter: NullableStringFieldUpdateOperationsInput
}

input ContactUpsertWithoutUserInput {
  create: ContactCreateWithoutUserInput!
  update: ContactUpdateWithoutUserDataInput!
}

input ContactWhereUniqueInput {
  id: Int
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

type File {
  id: Int!
  name: String
  status: String
  url: String
}

input FileCreateInput {
  name: String
  status: String
  task: FileOnTaskCreateManyWithoutFileInput
  url: String
}

input FileCreateOneWithoutTaskInput {
  connect: FileWhereUniqueInput
  create: FileCreateWithoutTaskInput
}

input FileCreateWithoutTaskInput {
  name: String
  status: String
  url: String
}

input FileOnTaskCreateManyWithoutFileInput {
  connect: [FileOnTaskWhereUniqueInput!]
  create: [FileOnTaskCreateWithoutFileInput!]
}

input FileOnTaskCreateManyWithoutTaskInput {
  connect: [FileOnTaskWhereUniqueInput!]
  create: [FileOnTaskCreateWithoutTaskInput!]
}

input FileOnTaskCreateWithoutFileInput {
  cretedAt: DateTime
  task: TaskCreateOneWithoutFilesInput!
}

input FileOnTaskCreateWithoutTaskInput {
  cretedAt: DateTime
  file: FileCreateOneWithoutTaskInput!
}

input FileOnTaskScalarWhereInput {
  AND: [FileOnTaskScalarWhereInput!]
  cretedAt: DateTimeFilter
  fileId: IntFilter
  NOT: [FileOnTaskScalarWhereInput!]
  OR: [FileOnTaskScalarWhereInput!]
  taskId: IntFilter
}

input FileOnTaskUpdateManyDataInput {
  cretedAt: DateTimeFieldUpdateOperationsInput
}

input FileOnTaskUpdateManyWithoutFileInput {
  connect: [FileOnTaskWhereUniqueInput!]
  create: [FileOnTaskCreateWithoutFileInput!]
  delete: [FileOnTaskWhereUniqueInput!]
  deleteMany: [FileOnTaskScalarWhereInput!]
  disconnect: [FileOnTaskWhereUniqueInput!]
  set: [FileOnTaskWhereUniqueInput!]
  update: [FileOnTaskUpdateWithWhereUniqueWithoutFileInput!]
  updateMany: [FileOnTaskUpdateManyWithWhereNestedInput!]
  upsert: [FileOnTaskUpsertWithWhereUniqueWithoutFileInput!]
}

input FileOnTaskUpdateManyWithoutTaskInput {
  connect: [FileOnTaskWhereUniqueInput!]
  create: [FileOnTaskCreateWithoutTaskInput!]
  delete: [FileOnTaskWhereUniqueInput!]
  deleteMany: [FileOnTaskScalarWhereInput!]
  disconnect: [FileOnTaskWhereUniqueInput!]
  set: [FileOnTaskWhereUniqueInput!]
  update: [FileOnTaskUpdateWithWhereUniqueWithoutTaskInput!]
  updateMany: [FileOnTaskUpdateManyWithWhereNestedInput!]
  upsert: [FileOnTaskUpsertWithWhereUniqueWithoutTaskInput!]
}

input FileOnTaskUpdateManyWithWhereNestedInput {
  data: FileOnTaskUpdateManyDataInput!
  where: FileOnTaskScalarWhereInput!
}

input FileOnTaskUpdateWithoutFileDataInput {
  cretedAt: DateTimeFieldUpdateOperationsInput
  task: TaskUpdateOneRequiredWithoutFilesInput
}

input FileOnTaskUpdateWithoutTaskDataInput {
  cretedAt: DateTimeFieldUpdateOperationsInput
  file: FileUpdateOneRequiredWithoutTaskInput
}

input FileOnTaskUpdateWithWhereUniqueWithoutFileInput {
  data: FileOnTaskUpdateWithoutFileDataInput!
  where: FileOnTaskWhereUniqueInput!
}

input FileOnTaskUpdateWithWhereUniqueWithoutTaskInput {
  data: FileOnTaskUpdateWithoutTaskDataInput!
  where: FileOnTaskWhereUniqueInput!
}

input FileOnTaskUpsertWithWhereUniqueWithoutFileInput {
  create: FileOnTaskCreateWithoutFileInput!
  update: FileOnTaskUpdateWithoutFileDataInput!
  where: FileOnTaskWhereUniqueInput!
}

input FileOnTaskUpsertWithWhereUniqueWithoutTaskInput {
  create: FileOnTaskCreateWithoutTaskInput!
  update: FileOnTaskUpdateWithoutTaskDataInput!
  where: FileOnTaskWhereUniqueInput!
}

input FileOnTaskWhereUniqueInput {
  taskId_fileId: TaskIdFileIdCompoundUniqueInput
}

input FileUpdateInput {
  name: NullableStringFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
  task: FileOnTaskUpdateManyWithoutFileInput
  url: NullableStringFieldUpdateOperationsInput
}

input FileUpdateOneRequiredWithoutTaskInput {
  connect: FileWhereUniqueInput
  create: FileCreateWithoutTaskInput
  update: FileUpdateWithoutTaskDataInput
  upsert: FileUpsertWithoutTaskInput
}

input FileUpdateWithoutTaskDataInput {
  name: NullableStringFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
  url: NullableStringFieldUpdateOperationsInput
}

input FileUpsertWithoutTaskInput {
  create: FileCreateWithoutTaskInput!
  update: FileUpdateWithoutTaskDataInput!
}

input FileWhereUniqueInput {
  id: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json

type Mutation {
  createOneComment(data: CommentCreateInput!): Comment!
  createOneContact(data: ContactCreateInput!): Contact!
  createOneFile(data: FileCreateInput!): File!
  createOneProject(data: ProjectCreateInput!): Project!
  createOneTask(data: TaskCreateInput!): Task!
  createOneUser(data: UserCreateInput!): User!
  deleteOneComment(where: CommentWhereUniqueInput!): Comment
  deleteOneContact(where: ContactWhereUniqueInput!): Contact
  deleteOneFile(where: FileWhereUniqueInput!): File
  deleteOneProject(where: ProjectWhereUniqueInput!): Project
  deleteOneTask(where: TaskWhereUniqueInput!): Task
  deleteOneUser(where: UserWhereUniqueInput!): User
  updateOneComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateOneContact(data: ContactUpdateInput!, where: ContactWhereUniqueInput!): Contact
  updateOneFile(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
  updateOneProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateOneTask(data: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Project {
  dueDate: DateTime!
  id: Int!
  members(after: ProjectOnUserWhereUniqueInput, before: ProjectOnUserWhereUniqueInput, first: Int, last: Int): [ProjectOnUser!]!
  projectDetail: String
  projectImage: String
  projectName: String
  projectType: String
  status: String
}

input ProjectCreateInput {
  dueDate: DateTime!
  members: ProjectOnUserCreateManyWithoutProjectInput
  projectDetail: String
  projectImage: String
  projectName: String
  projectType: String
  status: String
  tasks: TaskOnProjectCreateManyWithoutProjectInput
}

input ProjectCreateOneWithoutMembersInput {
  connect: ProjectWhereUniqueInput
  create: ProjectCreateWithoutMembersInput
}

input ProjectCreateOneWithoutTasksInput {
  connect: ProjectWhereUniqueInput
  create: ProjectCreateWithoutTasksInput
}

input ProjectCreateWithoutMembersInput {
  dueDate: DateTime!
  projectDetail: String
  projectImage: String
  projectName: String
  projectType: String
  status: String
  tasks: TaskOnProjectCreateManyWithoutProjectInput
}

input ProjectCreateWithoutTasksInput {
  dueDate: DateTime!
  members: ProjectOnUserCreateManyWithoutProjectInput
  projectDetail: String
  projectImage: String
  projectName: String
  projectType: String
  status: String
}

input ProjectIdTaskIdCompoundUniqueInput {
  projectId: Int!
  taskId: Int!
}

type ProjectOnUser {
  createdAt: DateTime!
  project: Project!
  user: User!
}

input ProjectOnUserCreateManyWithoutProjectInput {
  connect: [ProjectOnUserWhereUniqueInput!]
  create: [ProjectOnUserCreateWithoutProjectInput!]
}

input ProjectOnUserCreateManyWithoutUserInput {
  connect: [ProjectOnUserWhereUniqueInput!]
  create: [ProjectOnUserCreateWithoutUserInput!]
}

input ProjectOnUserCreateWithoutProjectInput {
  createdAt: DateTime
  user: UserCreateOneWithoutProjectsInput!
}

input ProjectOnUserCreateWithoutUserInput {
  createdAt: DateTime
  project: ProjectCreateOneWithoutMembersInput!
}

input ProjectOnUserScalarWhereInput {
  AND: [ProjectOnUserScalarWhereInput!]
  createdAt: DateTimeFilter
  NOT: [ProjectOnUserScalarWhereInput!]
  OR: [ProjectOnUserScalarWhereInput!]
  projectId: IntFilter
  userId: IntFilter
}

input ProjectOnUserUpdateManyDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
}

input ProjectOnUserUpdateManyWithoutProjectInput {
  connect: [ProjectOnUserWhereUniqueInput!]
  create: [ProjectOnUserCreateWithoutProjectInput!]
  delete: [ProjectOnUserWhereUniqueInput!]
  deleteMany: [ProjectOnUserScalarWhereInput!]
  disconnect: [ProjectOnUserWhereUniqueInput!]
  set: [ProjectOnUserWhereUniqueInput!]
  update: [ProjectOnUserUpdateWithWhereUniqueWithoutProjectInput!]
  updateMany: [ProjectOnUserUpdateManyWithWhereNestedInput!]
  upsert: [ProjectOnUserUpsertWithWhereUniqueWithoutProjectInput!]
}

input ProjectOnUserUpdateManyWithoutUserInput {
  connect: [ProjectOnUserWhereUniqueInput!]
  create: [ProjectOnUserCreateWithoutUserInput!]
  delete: [ProjectOnUserWhereUniqueInput!]
  deleteMany: [ProjectOnUserScalarWhereInput!]
  disconnect: [ProjectOnUserWhereUniqueInput!]
  set: [ProjectOnUserWhereUniqueInput!]
  update: [ProjectOnUserUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ProjectOnUserUpdateManyWithWhereNestedInput!]
  upsert: [ProjectOnUserUpsertWithWhereUniqueWithoutUserInput!]
}

input ProjectOnUserUpdateManyWithWhereNestedInput {
  data: ProjectOnUserUpdateManyDataInput!
  where: ProjectOnUserScalarWhereInput!
}

input ProjectOnUserUpdateWithoutProjectDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutProjectsInput
}

input ProjectOnUserUpdateWithoutUserDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  project: ProjectUpdateOneRequiredWithoutMembersInput
}

input ProjectOnUserUpdateWithWhereUniqueWithoutProjectInput {
  data: ProjectOnUserUpdateWithoutProjectDataInput!
  where: ProjectOnUserWhereUniqueInput!
}

input ProjectOnUserUpdateWithWhereUniqueWithoutUserInput {
  data: ProjectOnUserUpdateWithoutUserDataInput!
  where: ProjectOnUserWhereUniqueInput!
}

input ProjectOnUserUpsertWithWhereUniqueWithoutProjectInput {
  create: ProjectOnUserCreateWithoutProjectInput!
  update: ProjectOnUserUpdateWithoutProjectDataInput!
  where: ProjectOnUserWhereUniqueInput!
}

input ProjectOnUserUpsertWithWhereUniqueWithoutUserInput {
  create: ProjectOnUserCreateWithoutUserInput!
  update: ProjectOnUserUpdateWithoutUserDataInput!
  where: ProjectOnUserWhereUniqueInput!
}

input ProjectOnUserWhereUniqueInput {
  userId_projectId: UserIdProjectIdCompoundUniqueInput
}

input ProjectUpdateInput {
  dueDate: DateTimeFieldUpdateOperationsInput
  members: ProjectOnUserUpdateManyWithoutProjectInput
  projectDetail: NullableStringFieldUpdateOperationsInput
  projectImage: NullableStringFieldUpdateOperationsInput
  projectName: NullableStringFieldUpdateOperationsInput
  projectType: NullableStringFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
  tasks: TaskOnProjectUpdateManyWithoutProjectInput
}

input ProjectUpdateOneRequiredWithoutMembersInput {
  connect: ProjectWhereUniqueInput
  create: ProjectCreateWithoutMembersInput
  update: ProjectUpdateWithoutMembersDataInput
  upsert: ProjectUpsertWithoutMembersInput
}

input ProjectUpdateOneRequiredWithoutTasksInput {
  connect: ProjectWhereUniqueInput
  create: ProjectCreateWithoutTasksInput
  update: ProjectUpdateWithoutTasksDataInput
  upsert: ProjectUpsertWithoutTasksInput
}

input ProjectUpdateWithoutMembersDataInput {
  dueDate: DateTimeFieldUpdateOperationsInput
  projectDetail: NullableStringFieldUpdateOperationsInput
  projectImage: NullableStringFieldUpdateOperationsInput
  projectName: NullableStringFieldUpdateOperationsInput
  projectType: NullableStringFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
  tasks: TaskOnProjectUpdateManyWithoutProjectInput
}

input ProjectUpdateWithoutTasksDataInput {
  dueDate: DateTimeFieldUpdateOperationsInput
  members: ProjectOnUserUpdateManyWithoutProjectInput
  projectDetail: NullableStringFieldUpdateOperationsInput
  projectImage: NullableStringFieldUpdateOperationsInput
  projectName: NullableStringFieldUpdateOperationsInput
  projectType: NullableStringFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
}

input ProjectUpsertWithoutMembersInput {
  create: ProjectCreateWithoutMembersInput!
  update: ProjectUpdateWithoutMembersDataInput!
}

input ProjectUpsertWithoutTasksInput {
  create: ProjectCreateWithoutTasksInput!
  update: ProjectUpdateWithoutTasksDataInput!
}

input ProjectWhereUniqueInput {
  id: Int
}

type Query {
  comment(where: CommentWhereUniqueInput!): Comment
  comments(after: CommentWhereUniqueInput, before: CommentWhereUniqueInput, first: Int, last: Int): [Comment!]!
  contact(where: ContactWhereUniqueInput!): Contact
  contacts(after: ContactWhereUniqueInput, before: ContactWhereUniqueInput, first: Int, last: Int): [Contact!]!
  file(where: FileWhereUniqueInput!): File
  files(after: FileWhereUniqueInput, before: FileWhereUniqueInput, first: Int, last: Int): [File!]!
  project(where: ProjectWhereUniqueInput!): Project
  projects(after: ProjectWhereUniqueInput, before: ProjectWhereUniqueInput, first: Int, last: Int): [Project!]!
  task(where: TaskWhereUniqueInput!): Task
  tasks(after: TaskWhereUniqueInput, before: TaskWhereUniqueInput, first: Int, last: Int): [Task!]!
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

enum Role {
  ADMIN
  USER
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableListFilter {
  equals: [String!]
}

type Task {
  endTime: DateTime!
  id: Int!
  isDone: Boolean!
  members(after: TaskOnUserWhereUniqueInput, before: TaskOnUserWhereUniqueInput, first: Int, last: Int): [TaskOnUser!]!
  startTime: DateTime!
  taskDetail: String
  taskName: String
}

input TaskCreateInput {
  comments: CommentOnTaskCreateManyWithoutTaskInput
  endTime: DateTime
  files: FileOnTaskCreateManyWithoutTaskInput
  isDone: Boolean!
  members: TaskOnUserCreateManyWithoutTaskInput
  project: TaskOnProjectCreateOneWithoutTaskInput
  startTime: DateTime
  taskDetail: String
  taskName: String
}

input TaskCreateOneWithoutCommentsInput {
  connect: TaskWhereUniqueInput
  create: TaskCreateWithoutCommentsInput
}

input TaskCreateOneWithoutFilesInput {
  connect: TaskWhereUniqueInput
  create: TaskCreateWithoutFilesInput
}

input TaskCreateOneWithoutMembersInput {
  connect: TaskWhereUniqueInput
  create: TaskCreateWithoutMembersInput
}

input TaskCreateOneWithoutProjectInput {
  connect: TaskWhereUniqueInput
  create: TaskCreateWithoutProjectInput
}

input TaskCreateWithoutCommentsInput {
  endTime: DateTime
  files: FileOnTaskCreateManyWithoutTaskInput
  isDone: Boolean!
  members: TaskOnUserCreateManyWithoutTaskInput
  project: TaskOnProjectCreateOneWithoutTaskInput
  startTime: DateTime
  taskDetail: String
  taskName: String
}

input TaskCreateWithoutFilesInput {
  comments: CommentOnTaskCreateManyWithoutTaskInput
  endTime: DateTime
  isDone: Boolean!
  members: TaskOnUserCreateManyWithoutTaskInput
  project: TaskOnProjectCreateOneWithoutTaskInput
  startTime: DateTime
  taskDetail: String
  taskName: String
}

input TaskCreateWithoutMembersInput {
  comments: CommentOnTaskCreateManyWithoutTaskInput
  endTime: DateTime
  files: FileOnTaskCreateManyWithoutTaskInput
  isDone: Boolean!
  project: TaskOnProjectCreateOneWithoutTaskInput
  startTime: DateTime
  taskDetail: String
  taskName: String
}

input TaskCreateWithoutProjectInput {
  comments: CommentOnTaskCreateManyWithoutTaskInput
  endTime: DateTime
  files: FileOnTaskCreateManyWithoutTaskInput
  isDone: Boolean!
  members: TaskOnUserCreateManyWithoutTaskInput
  startTime: DateTime
  taskDetail: String
  taskName: String
}

input TaskIdCommentIdCompoundUniqueInput {
  commentId: Int!
  taskId: Int!
}

input TaskIdFileIdCompoundUniqueInput {
  fileId: Int!
  taskId: Int!
}

input TaskOnProjectCreateManyWithoutProjectInput {
  connect: [TaskOnProjectWhereUniqueInput!]
  create: [TaskOnProjectCreateWithoutProjectInput!]
}

input TaskOnProjectCreateOneWithoutTaskInput {
  connect: TaskOnProjectWhereUniqueInput
  create: TaskOnProjectCreateWithoutTaskInput
}

input TaskOnProjectCreateWithoutProjectInput {
  cretedAt: DateTime
  task: TaskCreateOneWithoutProjectInput!
}

input TaskOnProjectCreateWithoutTaskInput {
  cretedAt: DateTime
  project: ProjectCreateOneWithoutTasksInput!
}

input TaskOnProjectScalarWhereInput {
  AND: [TaskOnProjectScalarWhereInput!]
  cretedAt: DateTimeFilter
  NOT: [TaskOnProjectScalarWhereInput!]
  OR: [TaskOnProjectScalarWhereInput!]
  projectId: IntFilter
  taskId: IntFilter
}

input TaskOnProjectUpdateManyDataInput {
  cretedAt: DateTimeFieldUpdateOperationsInput
}

input TaskOnProjectUpdateManyWithoutProjectInput {
  connect: [TaskOnProjectWhereUniqueInput!]
  create: [TaskOnProjectCreateWithoutProjectInput!]
  delete: [TaskOnProjectWhereUniqueInput!]
  deleteMany: [TaskOnProjectScalarWhereInput!]
  disconnect: [TaskOnProjectWhereUniqueInput!]
  set: [TaskOnProjectWhereUniqueInput!]
  update: [TaskOnProjectUpdateWithWhereUniqueWithoutProjectInput!]
  updateMany: [TaskOnProjectUpdateManyWithWhereNestedInput!]
  upsert: [TaskOnProjectUpsertWithWhereUniqueWithoutProjectInput!]
}

input TaskOnProjectUpdateManyWithWhereNestedInput {
  data: TaskOnProjectUpdateManyDataInput!
  where: TaskOnProjectScalarWhereInput!
}

input TaskOnProjectUpdateOneRequiredWithoutTaskInput {
  connect: TaskOnProjectWhereUniqueInput
  create: TaskOnProjectCreateWithoutTaskInput
  update: TaskOnProjectUpdateWithoutTaskDataInput
  upsert: TaskOnProjectUpsertWithoutTaskInput
}

input TaskOnProjectUpdateWithoutProjectDataInput {
  cretedAt: DateTimeFieldUpdateOperationsInput
  task: TaskUpdateOneRequiredWithoutProjectInput
}

input TaskOnProjectUpdateWithoutTaskDataInput {
  cretedAt: DateTimeFieldUpdateOperationsInput
  project: ProjectUpdateOneRequiredWithoutTasksInput
}

input TaskOnProjectUpdateWithWhereUniqueWithoutProjectInput {
  data: TaskOnProjectUpdateWithoutProjectDataInput!
  where: TaskOnProjectWhereUniqueInput!
}

input TaskOnProjectUpsertWithoutTaskInput {
  create: TaskOnProjectCreateWithoutTaskInput!
  update: TaskOnProjectUpdateWithoutTaskDataInput!
}

input TaskOnProjectUpsertWithWhereUniqueWithoutProjectInput {
  create: TaskOnProjectCreateWithoutProjectInput!
  update: TaskOnProjectUpdateWithoutProjectDataInput!
  where: TaskOnProjectWhereUniqueInput!
}

input TaskOnProjectWhereUniqueInput {
  projectId_taskId: ProjectIdTaskIdCompoundUniqueInput
}

type TaskOnUser {
  cretedAt: DateTime!
  task: Task!
  user: User!
}

input TaskOnUserCreateManyWithoutTaskInput {
  connect: [TaskOnUserWhereUniqueInput!]
  create: [TaskOnUserCreateWithoutTaskInput!]
}

input TaskOnUserCreateManyWithoutUserInput {
  connect: [TaskOnUserWhereUniqueInput!]
  create: [TaskOnUserCreateWithoutUserInput!]
}

input TaskOnUserCreateWithoutTaskInput {
  cretedAt: DateTime
  user: UserCreateOneWithoutTasksInput!
}

input TaskOnUserCreateWithoutUserInput {
  cretedAt: DateTime
  task: TaskCreateOneWithoutMembersInput!
}

input TaskOnUserScalarWhereInput {
  AND: [TaskOnUserScalarWhereInput!]
  cretedAt: DateTimeFilter
  NOT: [TaskOnUserScalarWhereInput!]
  OR: [TaskOnUserScalarWhereInput!]
  taskId: IntFilter
  userId: IntFilter
}

input TaskOnUserUpdateManyDataInput {
  cretedAt: DateTimeFieldUpdateOperationsInput
}

input TaskOnUserUpdateManyWithoutTaskInput {
  connect: [TaskOnUserWhereUniqueInput!]
  create: [TaskOnUserCreateWithoutTaskInput!]
  delete: [TaskOnUserWhereUniqueInput!]
  deleteMany: [TaskOnUserScalarWhereInput!]
  disconnect: [TaskOnUserWhereUniqueInput!]
  set: [TaskOnUserWhereUniqueInput!]
  update: [TaskOnUserUpdateWithWhereUniqueWithoutTaskInput!]
  updateMany: [TaskOnUserUpdateManyWithWhereNestedInput!]
  upsert: [TaskOnUserUpsertWithWhereUniqueWithoutTaskInput!]
}

input TaskOnUserUpdateManyWithoutUserInput {
  connect: [TaskOnUserWhereUniqueInput!]
  create: [TaskOnUserCreateWithoutUserInput!]
  delete: [TaskOnUserWhereUniqueInput!]
  deleteMany: [TaskOnUserScalarWhereInput!]
  disconnect: [TaskOnUserWhereUniqueInput!]
  set: [TaskOnUserWhereUniqueInput!]
  update: [TaskOnUserUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [TaskOnUserUpdateManyWithWhereNestedInput!]
  upsert: [TaskOnUserUpsertWithWhereUniqueWithoutUserInput!]
}

input TaskOnUserUpdateManyWithWhereNestedInput {
  data: TaskOnUserUpdateManyDataInput!
  where: TaskOnUserScalarWhereInput!
}

input TaskOnUserUpdateWithoutTaskDataInput {
  cretedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutTasksInput
}

input TaskOnUserUpdateWithoutUserDataInput {
  cretedAt: DateTimeFieldUpdateOperationsInput
  task: TaskUpdateOneRequiredWithoutMembersInput
}

input TaskOnUserUpdateWithWhereUniqueWithoutTaskInput {
  data: TaskOnUserUpdateWithoutTaskDataInput!
  where: TaskOnUserWhereUniqueInput!
}

input TaskOnUserUpdateWithWhereUniqueWithoutUserInput {
  data: TaskOnUserUpdateWithoutUserDataInput!
  where: TaskOnUserWhereUniqueInput!
}

input TaskOnUserUpsertWithWhereUniqueWithoutTaskInput {
  create: TaskOnUserCreateWithoutTaskInput!
  update: TaskOnUserUpdateWithoutTaskDataInput!
  where: TaskOnUserWhereUniqueInput!
}

input TaskOnUserUpsertWithWhereUniqueWithoutUserInput {
  create: TaskOnUserCreateWithoutUserInput!
  update: TaskOnUserUpdateWithoutUserDataInput!
  where: TaskOnUserWhereUniqueInput!
}

input TaskOnUserWhereUniqueInput {
  userId_taskId: UserIdTaskIdCompoundUniqueInput
}

input TaskUpdateInput {
  comments: CommentOnTaskUpdateManyWithoutTaskInput
  endTime: DateTimeFieldUpdateOperationsInput
  files: FileOnTaskUpdateManyWithoutTaskInput
  isDone: BoolFieldUpdateOperationsInput
  members: TaskOnUserUpdateManyWithoutTaskInput
  project: TaskOnProjectUpdateOneRequiredWithoutTaskInput
  startTime: DateTimeFieldUpdateOperationsInput
  taskDetail: NullableStringFieldUpdateOperationsInput
  taskName: NullableStringFieldUpdateOperationsInput
}

input TaskUpdateOneRequiredWithoutCommentsInput {
  connect: TaskWhereUniqueInput
  create: TaskCreateWithoutCommentsInput
  update: TaskUpdateWithoutCommentsDataInput
  upsert: TaskUpsertWithoutCommentsInput
}

input TaskUpdateOneRequiredWithoutFilesInput {
  connect: TaskWhereUniqueInput
  create: TaskCreateWithoutFilesInput
  update: TaskUpdateWithoutFilesDataInput
  upsert: TaskUpsertWithoutFilesInput
}

input TaskUpdateOneRequiredWithoutMembersInput {
  connect: TaskWhereUniqueInput
  create: TaskCreateWithoutMembersInput
  update: TaskUpdateWithoutMembersDataInput
  upsert: TaskUpsertWithoutMembersInput
}

input TaskUpdateOneRequiredWithoutProjectInput {
  connect: TaskWhereUniqueInput
  create: TaskCreateWithoutProjectInput
  update: TaskUpdateWithoutProjectDataInput
  upsert: TaskUpsertWithoutProjectInput
}

input TaskUpdateWithoutCommentsDataInput {
  endTime: DateTimeFieldUpdateOperationsInput
  files: FileOnTaskUpdateManyWithoutTaskInput
  isDone: BoolFieldUpdateOperationsInput
  members: TaskOnUserUpdateManyWithoutTaskInput
  project: TaskOnProjectUpdateOneRequiredWithoutTaskInput
  startTime: DateTimeFieldUpdateOperationsInput
  taskDetail: NullableStringFieldUpdateOperationsInput
  taskName: NullableStringFieldUpdateOperationsInput
}

input TaskUpdateWithoutFilesDataInput {
  comments: CommentOnTaskUpdateManyWithoutTaskInput
  endTime: DateTimeFieldUpdateOperationsInput
  isDone: BoolFieldUpdateOperationsInput
  members: TaskOnUserUpdateManyWithoutTaskInput
  project: TaskOnProjectUpdateOneRequiredWithoutTaskInput
  startTime: DateTimeFieldUpdateOperationsInput
  taskDetail: NullableStringFieldUpdateOperationsInput
  taskName: NullableStringFieldUpdateOperationsInput
}

input TaskUpdateWithoutMembersDataInput {
  comments: CommentOnTaskUpdateManyWithoutTaskInput
  endTime: DateTimeFieldUpdateOperationsInput
  files: FileOnTaskUpdateManyWithoutTaskInput
  isDone: BoolFieldUpdateOperationsInput
  project: TaskOnProjectUpdateOneRequiredWithoutTaskInput
  startTime: DateTimeFieldUpdateOperationsInput
  taskDetail: NullableStringFieldUpdateOperationsInput
  taskName: NullableStringFieldUpdateOperationsInput
}

input TaskUpdateWithoutProjectDataInput {
  comments: CommentOnTaskUpdateManyWithoutTaskInput
  endTime: DateTimeFieldUpdateOperationsInput
  files: FileOnTaskUpdateManyWithoutTaskInput
  isDone: BoolFieldUpdateOperationsInput
  members: TaskOnUserUpdateManyWithoutTaskInput
  startTime: DateTimeFieldUpdateOperationsInput
  taskDetail: NullableStringFieldUpdateOperationsInput
  taskName: NullableStringFieldUpdateOperationsInput
}

input TaskUpsertWithoutCommentsInput {
  create: TaskCreateWithoutCommentsInput!
  update: TaskUpdateWithoutCommentsDataInput!
}

input TaskUpsertWithoutFilesInput {
  create: TaskCreateWithoutFilesInput!
  update: TaskUpdateWithoutFilesDataInput!
}

input TaskUpsertWithoutMembersInput {
  create: TaskCreateWithoutMembersInput!
  update: TaskUpdateWithoutMembersDataInput!
}

input TaskUpsertWithoutProjectInput {
  create: TaskCreateWithoutProjectInput!
  update: TaskUpdateWithoutProjectDataInput!
}

input TaskWhereUniqueInput {
  id: Int
}

type User {
  contacts: Contact!
  email: String!
  id: Int!
  image: String
  name: String
  position: String
  projects(after: ProjectOnUserWhereUniqueInput, before: ProjectOnUserWhereUniqueInput, first: Int, last: Int): [ProjectOnUser!]!
  skills: [String!]!
  tasks(after: TaskOnUserWhereUniqueInput, before: TaskOnUserWhereUniqueInput, first: Int, last: Int): [TaskOnUser!]!
}

input UserCreateInput {
  comments: CommentOnUserCreateManyWithoutUserInput
  contacts: ContactCreateOneWithoutUserInput!
  email: String!
  image: String
  name: String
  position: String
  projects: ProjectOnUserCreateManyWithoutUserInput
  role: Role
  skills: UserCreateskillsInput
  tasks: TaskOnUserCreateManyWithoutUserInput
}

input UserCreateManyWithoutContactsInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutContactsInput!]
}

input UserCreateOneWithoutCommentsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCommentsInput
}

input UserCreateOneWithoutProjectsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutProjectsInput
}

input UserCreateOneWithoutTasksInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutTasksInput
}

input UserCreateskillsInput {
  set: [String!]
}

input UserCreateWithoutCommentsInput {
  contacts: ContactCreateOneWithoutUserInput!
  email: String!
  image: String
  name: String
  position: String
  projects: ProjectOnUserCreateManyWithoutUserInput
  role: Role
  skills: UserCreateskillsInput
  tasks: TaskOnUserCreateManyWithoutUserInput
}

input UserCreateWithoutContactsInput {
  comments: CommentOnUserCreateManyWithoutUserInput
  email: String!
  image: String
  name: String
  position: String
  projects: ProjectOnUserCreateManyWithoutUserInput
  role: Role
  skills: UserCreateskillsInput
  tasks: TaskOnUserCreateManyWithoutUserInput
}

input UserCreateWithoutProjectsInput {
  comments: CommentOnUserCreateManyWithoutUserInput
  contacts: ContactCreateOneWithoutUserInput!
  email: String!
  image: String
  name: String
  position: String
  role: Role
  skills: UserCreateskillsInput
  tasks: TaskOnUserCreateManyWithoutUserInput
}

input UserCreateWithoutTasksInput {
  comments: CommentOnUserCreateManyWithoutUserInput
  contacts: ContactCreateOneWithoutUserInput!
  email: String!
  image: String
  name: String
  position: String
  projects: ProjectOnUserCreateManyWithoutUserInput
  role: Role
  skills: UserCreateskillsInput
}

input UserIdCommentIdCompoundUniqueInput {
  commentId: Int!
  userId: Int!
}

input UserIdProjectIdCompoundUniqueInput {
  projectId: Int!
  userId: Int!
}

input UserIdTaskIdCompoundUniqueInput {
  taskId: Int!
  userId: Int!
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  contactId: IntFilter
  email: StringFilter
  id: IntFilter
  image: StringNullableFilter
  name: StringNullableFilter
  NOT: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  position: StringNullableFilter
  role: Role
  skills: StringNullableListFilter
}

input UserUpdateInput {
  comments: CommentOnUserUpdateManyWithoutUserInput
  contacts: ContactUpdateOneRequiredWithoutUserInput
  email: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  position: NullableStringFieldUpdateOperationsInput
  projects: ProjectOnUserUpdateManyWithoutUserInput
  role: Role
  skills: UserUpdateskillsInput
  tasks: TaskOnUserUpdateManyWithoutUserInput
}

input UserUpdateManyDataInput {
  email: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  position: NullableStringFieldUpdateOperationsInput
  role: Role
  skills: UserUpdateskillsInput
}

input UserUpdateManyWithoutContactsInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutContactsInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutContactsInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutContactsInput!]
}

input UserUpdateManyWithWhereNestedInput {
  data: UserUpdateManyDataInput!
  where: UserScalarWhereInput!
}

input UserUpdateOneRequiredWithoutCommentsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCommentsInput
  update: UserUpdateWithoutCommentsDataInput
  upsert: UserUpsertWithoutCommentsInput
}

input UserUpdateOneRequiredWithoutProjectsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutProjectsInput
  update: UserUpdateWithoutProjectsDataInput
  upsert: UserUpsertWithoutProjectsInput
}

input UserUpdateOneRequiredWithoutTasksInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutTasksInput
  update: UserUpdateWithoutTasksDataInput
  upsert: UserUpsertWithoutTasksInput
}

input UserUpdateskillsInput {
  set: [String!]
}

input UserUpdateWithoutCommentsDataInput {
  contacts: ContactUpdateOneRequiredWithoutUserInput
  email: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  position: NullableStringFieldUpdateOperationsInput
  projects: ProjectOnUserUpdateManyWithoutUserInput
  role: Role
  skills: UserUpdateskillsInput
  tasks: TaskOnUserUpdateManyWithoutUserInput
}

input UserUpdateWithoutContactsDataInput {
  comments: CommentOnUserUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  position: NullableStringFieldUpdateOperationsInput
  projects: ProjectOnUserUpdateManyWithoutUserInput
  role: Role
  skills: UserUpdateskillsInput
  tasks: TaskOnUserUpdateManyWithoutUserInput
}

input UserUpdateWithoutProjectsDataInput {
  comments: CommentOnUserUpdateManyWithoutUserInput
  contacts: ContactUpdateOneRequiredWithoutUserInput
  email: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  position: NullableStringFieldUpdateOperationsInput
  role: Role
  skills: UserUpdateskillsInput
  tasks: TaskOnUserUpdateManyWithoutUserInput
}

input UserUpdateWithoutTasksDataInput {
  comments: CommentOnUserUpdateManyWithoutUserInput
  contacts: ContactUpdateOneRequiredWithoutUserInput
  email: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  position: NullableStringFieldUpdateOperationsInput
  projects: ProjectOnUserUpdateManyWithoutUserInput
  role: Role
  skills: UserUpdateskillsInput
}

input UserUpdateWithWhereUniqueWithoutContactsInput {
  data: UserUpdateWithoutContactsDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput!
  update: UserUpdateWithoutCommentsDataInput!
}

input UserUpsertWithoutProjectsInput {
  create: UserCreateWithoutProjectsInput!
  update: UserUpdateWithoutProjectsDataInput!
}

input UserUpsertWithoutTasksInput {
  create: UserCreateWithoutTasksInput!
  update: UserUpdateWithoutTasksDataInput!
}

input UserUpsertWithWhereUniqueWithoutContactsInput {
  create: UserCreateWithoutContactsInput!
  update: UserUpdateWithoutContactsDataInput!
  where: UserWhereUniqueInput!
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
