### This file was generated by Nexus Schema
### Do not make changes to this file directly


input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

type Comment {
  id: Int!
  image: String
  message: String
  taskId: Int
  timestamp: DateTime!
  userId: Int
  userImg: String
  userName: String
}

input CommentCreateInput {
  image: String
  message: String
  task: TaskCreateOneWithoutCommentsInput
  timestamp: DateTime
  userImg: String
  userName: String
  users: UserCreateOneWithoutCommentsInput
}

input CommentCreateManyWithoutTaskInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutTaskInput!]
}

input CommentCreateManyWithoutUsersInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutUsersInput!]
}

input CommentCreateWithoutTaskInput {
  image: String
  message: String
  timestamp: DateTime
  userImg: String
  userName: String
  users: UserCreateOneWithoutCommentsInput
}

input CommentCreateWithoutUsersInput {
  image: String
  message: String
  task: TaskCreateOneWithoutCommentsInput
  timestamp: DateTime
  userImg: String
  userName: String
}

input CommentScalarWhereInput {
  AND: [CommentScalarWhereInput!]
  id: IntFilter
  image: StringNullableFilter
  message: StringNullableFilter
  NOT: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  taskId: IntNullableFilter
  timestamp: DateTimeFilter
  userId: IntNullableFilter
  userImg: StringNullableFilter
  userName: StringNullableFilter
}

input CommentUpdateInput {
  image: NullableStringFieldUpdateOperationsInput
  message: NullableStringFieldUpdateOperationsInput
  task: TaskUpdateOneWithoutCommentsInput
  timestamp: DateTimeFieldUpdateOperationsInput
  userImg: NullableStringFieldUpdateOperationsInput
  userName: NullableStringFieldUpdateOperationsInput
  users: UserUpdateOneWithoutCommentsInput
}

input CommentUpdateManyDataInput {
  image: NullableStringFieldUpdateOperationsInput
  message: NullableStringFieldUpdateOperationsInput
  timestamp: DateTimeFieldUpdateOperationsInput
  userImg: NullableStringFieldUpdateOperationsInput
  userName: NullableStringFieldUpdateOperationsInput
}

input CommentUpdateManyWithoutTaskInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutTaskInput!]
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutTaskInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutTaskInput!]
}

input CommentUpdateManyWithoutUsersInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutUsersInput!]
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutUsersInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutUsersInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  data: CommentUpdateManyDataInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateWithoutTaskDataInput {
  image: NullableStringFieldUpdateOperationsInput
  message: NullableStringFieldUpdateOperationsInput
  timestamp: DateTimeFieldUpdateOperationsInput
  userImg: NullableStringFieldUpdateOperationsInput
  userName: NullableStringFieldUpdateOperationsInput
  users: UserUpdateOneWithoutCommentsInput
}

input CommentUpdateWithoutUsersDataInput {
  image: NullableStringFieldUpdateOperationsInput
  message: NullableStringFieldUpdateOperationsInput
  task: TaskUpdateOneWithoutCommentsInput
  timestamp: DateTimeFieldUpdateOperationsInput
  userImg: NullableStringFieldUpdateOperationsInput
  userName: NullableStringFieldUpdateOperationsInput
}

input CommentUpdateWithWhereUniqueWithoutTaskInput {
  data: CommentUpdateWithoutTaskDataInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithWhereUniqueWithoutUsersInput {
  data: CommentUpdateWithoutUsersDataInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutTaskInput {
  create: CommentCreateWithoutTaskInput!
  update: CommentUpdateWithoutTaskDataInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutUsersInput {
  create: CommentCreateWithoutUsersInput!
  update: CommentUpdateWithoutUsersDataInput!
  where: CommentWhereUniqueInput!
}

input CommentWhereUniqueInput {
  id: Int
}

type Contact {
  facebook: String
  github: String
  gitlab: String
  id: Int!
  instagram: String
  twitter: String
}

input ContactCreateInput {
  facebook: String
  github: String
  gitlab: String
  instagram: String
  twitter: String
  user: UserCreateOneWithoutContactsInput
}

input ContactCreateManyWithoutUserInput {
  connect: [ContactWhereUniqueInput!]
  create: [ContactCreateWithoutUserInput!]
}

input ContactCreateWithoutUserInput {
  facebook: String
  github: String
  gitlab: String
  instagram: String
  twitter: String
}

input ContactScalarWhereInput {
  AND: [ContactScalarWhereInput!]
  facebook: StringNullableFilter
  github: StringNullableFilter
  gitlab: StringNullableFilter
  id: IntFilter
  instagram: StringNullableFilter
  NOT: [ContactScalarWhereInput!]
  OR: [ContactScalarWhereInput!]
  twitter: StringNullableFilter
  userId: IntNullableFilter
}

input ContactUpdateInput {
  facebook: NullableStringFieldUpdateOperationsInput
  github: NullableStringFieldUpdateOperationsInput
  gitlab: NullableStringFieldUpdateOperationsInput
  instagram: NullableStringFieldUpdateOperationsInput
  twitter: NullableStringFieldUpdateOperationsInput
  user: UserUpdateOneWithoutContactsInput
}

input ContactUpdateManyDataInput {
  facebook: NullableStringFieldUpdateOperationsInput
  github: NullableStringFieldUpdateOperationsInput
  gitlab: NullableStringFieldUpdateOperationsInput
  instagram: NullableStringFieldUpdateOperationsInput
  twitter: NullableStringFieldUpdateOperationsInput
}

input ContactUpdateManyWithoutUserInput {
  connect: [ContactWhereUniqueInput!]
  create: [ContactCreateWithoutUserInput!]
  delete: [ContactWhereUniqueInput!]
  deleteMany: [ContactScalarWhereInput!]
  disconnect: [ContactWhereUniqueInput!]
  set: [ContactWhereUniqueInput!]
  update: [ContactUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ContactUpdateManyWithWhereNestedInput!]
  upsert: [ContactUpsertWithWhereUniqueWithoutUserInput!]
}

input ContactUpdateManyWithWhereNestedInput {
  data: ContactUpdateManyDataInput!
  where: ContactScalarWhereInput!
}

input ContactUpdateWithoutUserDataInput {
  facebook: NullableStringFieldUpdateOperationsInput
  github: NullableStringFieldUpdateOperationsInput
  gitlab: NullableStringFieldUpdateOperationsInput
  instagram: NullableStringFieldUpdateOperationsInput
  twitter: NullableStringFieldUpdateOperationsInput
}

input ContactUpdateWithWhereUniqueWithoutUserInput {
  data: ContactUpdateWithoutUserDataInput!
  where: ContactWhereUniqueInput!
}

input ContactUpsertWithWhereUniqueWithoutUserInput {
  create: ContactCreateWithoutUserInput!
  update: ContactUpdateWithoutUserDataInput!
  where: ContactWhereUniqueInput!
}

input ContactWhereUniqueInput {
  id: Int
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

type File {
  id: Int!
  name: String
  status: String
  url: String
}

input FileCreateInput {
  name: String
  status: String
  task: TaskCreateOneWithoutFilesInput
  url: String
}

input FileCreateManyWithoutTaskInput {
  connect: [FileWhereUniqueInput!]
  create: [FileCreateWithoutTaskInput!]
}

input FileCreateWithoutTaskInput {
  name: String
  status: String
  url: String
}

input FileScalarWhereInput {
  AND: [FileScalarWhereInput!]
  id: IntFilter
  name: StringNullableFilter
  NOT: [FileScalarWhereInput!]
  OR: [FileScalarWhereInput!]
  status: StringNullableFilter
  taskId: IntNullableFilter
  url: StringNullableFilter
}

input FileUpdateInput {
  name: NullableStringFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
  task: TaskUpdateOneWithoutFilesInput
  url: NullableStringFieldUpdateOperationsInput
}

input FileUpdateManyDataInput {
  name: NullableStringFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
  url: NullableStringFieldUpdateOperationsInput
}

input FileUpdateManyWithoutTaskInput {
  connect: [FileWhereUniqueInput!]
  create: [FileCreateWithoutTaskInput!]
  delete: [FileWhereUniqueInput!]
  deleteMany: [FileScalarWhereInput!]
  disconnect: [FileWhereUniqueInput!]
  set: [FileWhereUniqueInput!]
  update: [FileUpdateWithWhereUniqueWithoutTaskInput!]
  updateMany: [FileUpdateManyWithWhereNestedInput!]
  upsert: [FileUpsertWithWhereUniqueWithoutTaskInput!]
}

input FileUpdateManyWithWhereNestedInput {
  data: FileUpdateManyDataInput!
  where: FileScalarWhereInput!
}

input FileUpdateWithoutTaskDataInput {
  name: NullableStringFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
  url: NullableStringFieldUpdateOperationsInput
}

input FileUpdateWithWhereUniqueWithoutTaskInput {
  data: FileUpdateWithoutTaskDataInput!
  where: FileWhereUniqueInput!
}

input FileUpsertWithWhereUniqueWithoutTaskInput {
  create: FileCreateWithoutTaskInput!
  update: FileUpdateWithoutTaskDataInput!
  where: FileWhereUniqueInput!
}

input FileWhereUniqueInput {
  id: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json

type Mutation {
  createOneComment(data: CommentCreateInput!): Comment!
  createOneContact(data: ContactCreateInput!): Contact!
  createOneFile(data: FileCreateInput!): File!
  createOneProject(data: ProjectCreateInput!): Project!
  createOneTask(data: TaskCreateInput!): Task!
  createOneUser(data: UserCreateInput!): User!
  deleteOneComment(where: CommentWhereUniqueInput!): Comment
  deleteOneContact(where: ContactWhereUniqueInput!): Contact
  deleteOneFile(where: FileWhereUniqueInput!): File
  deleteOneProject(where: ProjectWhereUniqueInput!): Project
  deleteOneTask(where: TaskWhereUniqueInput!): Task
  deleteOneUser(where: UserWhereUniqueInput!): User
  updateOneComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateOneContact(data: ContactUpdateInput!, where: ContactWhereUniqueInput!): Contact
  updateOneFile(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
  updateOneProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateOneTask(data: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Project {
  dueDate: DateTime!
  id: Int!
  members(after: ProjectOnUserWhereUniqueInput, before: ProjectOnUserWhereUniqueInput, first: Int, last: Int): [ProjectOnUser!]!
  projectDetail: String
  projectImage: String
  projectName: String
  projectType: String
  status: String
}

input ProjectCreateInput {
  dueDate: DateTime!
  members: ProjectOnUserCreateManyWithoutProjectInput
  projectDetail: String
  projectImage: String
  projectName: String
  projectType: String
  status: String
  task: TaskCreateManyWithoutProjectInput
}

input ProjectCreateOneWithoutMembersInput {
  connect: ProjectWhereUniqueInput
  create: ProjectCreateWithoutMembersInput
}

input ProjectCreateOneWithoutTaskInput {
  connect: ProjectWhereUniqueInput
  create: ProjectCreateWithoutTaskInput
}

input ProjectCreateWithoutMembersInput {
  dueDate: DateTime!
  projectDetail: String
  projectImage: String
  projectName: String
  projectType: String
  status: String
  task: TaskCreateManyWithoutProjectInput
}

input ProjectCreateWithoutTaskInput {
  dueDate: DateTime!
  members: ProjectOnUserCreateManyWithoutProjectInput
  projectDetail: String
  projectImage: String
  projectName: String
  projectType: String
  status: String
}

type ProjectOnUser {
  createdAt: DateTime!
  project: Project!
  user: User!
}

input ProjectOnUserCreateManyWithoutProjectInput {
  connect: [ProjectOnUserWhereUniqueInput!]
  create: [ProjectOnUserCreateWithoutProjectInput!]
}

input ProjectOnUserCreateManyWithoutUserInput {
  connect: [ProjectOnUserWhereUniqueInput!]
  create: [ProjectOnUserCreateWithoutUserInput!]
}

input ProjectOnUserCreateWithoutProjectInput {
  createdAt: DateTime
  user: UserCreateOneWithoutProjectsInput!
}

input ProjectOnUserCreateWithoutUserInput {
  createdAt: DateTime
  project: ProjectCreateOneWithoutMembersInput!
}

input ProjectOnUserScalarWhereInput {
  AND: [ProjectOnUserScalarWhereInput!]
  createdAt: DateTimeFilter
  NOT: [ProjectOnUserScalarWhereInput!]
  OR: [ProjectOnUserScalarWhereInput!]
  projectId: IntFilter
  userId: IntFilter
}

input ProjectOnUserUpdateManyDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
}

input ProjectOnUserUpdateManyWithoutProjectInput {
  connect: [ProjectOnUserWhereUniqueInput!]
  create: [ProjectOnUserCreateWithoutProjectInput!]
  delete: [ProjectOnUserWhereUniqueInput!]
  deleteMany: [ProjectOnUserScalarWhereInput!]
  disconnect: [ProjectOnUserWhereUniqueInput!]
  set: [ProjectOnUserWhereUniqueInput!]
  update: [ProjectOnUserUpdateWithWhereUniqueWithoutProjectInput!]
  updateMany: [ProjectOnUserUpdateManyWithWhereNestedInput!]
  upsert: [ProjectOnUserUpsertWithWhereUniqueWithoutProjectInput!]
}

input ProjectOnUserUpdateManyWithoutUserInput {
  connect: [ProjectOnUserWhereUniqueInput!]
  create: [ProjectOnUserCreateWithoutUserInput!]
  delete: [ProjectOnUserWhereUniqueInput!]
  deleteMany: [ProjectOnUserScalarWhereInput!]
  disconnect: [ProjectOnUserWhereUniqueInput!]
  set: [ProjectOnUserWhereUniqueInput!]
  update: [ProjectOnUserUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ProjectOnUserUpdateManyWithWhereNestedInput!]
  upsert: [ProjectOnUserUpsertWithWhereUniqueWithoutUserInput!]
}

input ProjectOnUserUpdateManyWithWhereNestedInput {
  data: ProjectOnUserUpdateManyDataInput!
  where: ProjectOnUserScalarWhereInput!
}

input ProjectOnUserUpdateWithoutProjectDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutProjectsInput
}

input ProjectOnUserUpdateWithoutUserDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  project: ProjectUpdateOneRequiredWithoutMembersInput
}

input ProjectOnUserUpdateWithWhereUniqueWithoutProjectInput {
  data: ProjectOnUserUpdateWithoutProjectDataInput!
  where: ProjectOnUserWhereUniqueInput!
}

input ProjectOnUserUpdateWithWhereUniqueWithoutUserInput {
  data: ProjectOnUserUpdateWithoutUserDataInput!
  where: ProjectOnUserWhereUniqueInput!
}

input ProjectOnUserUpsertWithWhereUniqueWithoutProjectInput {
  create: ProjectOnUserCreateWithoutProjectInput!
  update: ProjectOnUserUpdateWithoutProjectDataInput!
  where: ProjectOnUserWhereUniqueInput!
}

input ProjectOnUserUpsertWithWhereUniqueWithoutUserInput {
  create: ProjectOnUserCreateWithoutUserInput!
  update: ProjectOnUserUpdateWithoutUserDataInput!
  where: ProjectOnUserWhereUniqueInput!
}

input ProjectOnUserWhereUniqueInput {
  userId_projectId: UserIdProjectIdCompoundUniqueInput
}

input ProjectUpdateInput {
  dueDate: DateTimeFieldUpdateOperationsInput
  members: ProjectOnUserUpdateManyWithoutProjectInput
  projectDetail: NullableStringFieldUpdateOperationsInput
  projectImage: NullableStringFieldUpdateOperationsInput
  projectName: NullableStringFieldUpdateOperationsInput
  projectType: NullableStringFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
  task: TaskUpdateManyWithoutProjectInput
}

input ProjectUpdateOneRequiredWithoutMembersInput {
  connect: ProjectWhereUniqueInput
  create: ProjectCreateWithoutMembersInput
  update: ProjectUpdateWithoutMembersDataInput
  upsert: ProjectUpsertWithoutMembersInput
}

input ProjectUpdateOneWithoutTaskInput {
  connect: ProjectWhereUniqueInput
  create: ProjectCreateWithoutTaskInput
  delete: Boolean
  disconnect: Boolean
  update: ProjectUpdateWithoutTaskDataInput
  upsert: ProjectUpsertWithoutTaskInput
}

input ProjectUpdateWithoutMembersDataInput {
  dueDate: DateTimeFieldUpdateOperationsInput
  projectDetail: NullableStringFieldUpdateOperationsInput
  projectImage: NullableStringFieldUpdateOperationsInput
  projectName: NullableStringFieldUpdateOperationsInput
  projectType: NullableStringFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
  task: TaskUpdateManyWithoutProjectInput
}

input ProjectUpdateWithoutTaskDataInput {
  dueDate: DateTimeFieldUpdateOperationsInput
  members: ProjectOnUserUpdateManyWithoutProjectInput
  projectDetail: NullableStringFieldUpdateOperationsInput
  projectImage: NullableStringFieldUpdateOperationsInput
  projectName: NullableStringFieldUpdateOperationsInput
  projectType: NullableStringFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
}

input ProjectUpsertWithoutMembersInput {
  create: ProjectCreateWithoutMembersInput!
  update: ProjectUpdateWithoutMembersDataInput!
}

input ProjectUpsertWithoutTaskInput {
  create: ProjectCreateWithoutTaskInput!
  update: ProjectUpdateWithoutTaskDataInput!
}

input ProjectWhereUniqueInput {
  id: Int
}

type Query {
  comment(where: CommentWhereUniqueInput!): Comment
  comments(after: CommentWhereUniqueInput, before: CommentWhereUniqueInput, first: Int, last: Int): [Comment!]!
  contact(where: ContactWhereUniqueInput!): Contact
  contacts(after: ContactWhereUniqueInput, before: ContactWhereUniqueInput, first: Int, last: Int): [Contact!]!
  file(where: FileWhereUniqueInput!): File
  files(after: FileWhereUniqueInput, before: FileWhereUniqueInput, first: Int, last: Int): [File!]!
  project(where: ProjectWhereUniqueInput!): Project
  projects(after: ProjectWhereUniqueInput, before: ProjectWhereUniqueInput, first: Int, last: Int): [Project!]!
  task(where: TaskWhereUniqueInput!): Task
  tasks(after: TaskWhereUniqueInput, before: TaskWhereUniqueInput, first: Int, last: Int): [Task!]!
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

enum Role {
  ADMIN
  USER
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Task {
  comments(after: CommentWhereUniqueInput, before: CommentWhereUniqueInput, first: Int, last: Int): [Comment!]!
  endTime: DateTime!
  files(after: FileWhereUniqueInput, before: FileWhereUniqueInput, first: Int, last: Int): [File!]!
  id: Int!
  isDone: Boolean!
  members(after: TaskOnUserWhereUniqueInput, before: TaskOnUserWhereUniqueInput, first: Int, last: Int): [TaskOnUser!]!
  projectId: Int
  startTime: DateTime!
  taskDetail: String
  taskName: String
}

input TaskCreateInput {
  comments: CommentCreateManyWithoutTaskInput
  endTime: DateTime!
  files: FileCreateManyWithoutTaskInput
  isDone: Boolean!
  members: TaskOnUserCreateManyWithoutTaskInput
  Project: ProjectCreateOneWithoutTaskInput
  startTime: DateTime
  taskDetail: String
  taskName: String
}

input TaskCreateManyWithoutProjectInput {
  connect: [TaskWhereUniqueInput!]
  create: [TaskCreateWithoutProjectInput!]
}

input TaskCreateOneWithoutCommentsInput {
  connect: TaskWhereUniqueInput
  create: TaskCreateWithoutCommentsInput
}

input TaskCreateOneWithoutFilesInput {
  connect: TaskWhereUniqueInput
  create: TaskCreateWithoutFilesInput
}

input TaskCreateOneWithoutMembersInput {
  connect: TaskWhereUniqueInput
  create: TaskCreateWithoutMembersInput
}

input TaskCreateWithoutCommentsInput {
  endTime: DateTime!
  files: FileCreateManyWithoutTaskInput
  isDone: Boolean!
  members: TaskOnUserCreateManyWithoutTaskInput
  Project: ProjectCreateOneWithoutTaskInput
  startTime: DateTime
  taskDetail: String
  taskName: String
}

input TaskCreateWithoutFilesInput {
  comments: CommentCreateManyWithoutTaskInput
  endTime: DateTime!
  isDone: Boolean!
  members: TaskOnUserCreateManyWithoutTaskInput
  Project: ProjectCreateOneWithoutTaskInput
  startTime: DateTime
  taskDetail: String
  taskName: String
}

input TaskCreateWithoutMembersInput {
  comments: CommentCreateManyWithoutTaskInput
  endTime: DateTime!
  files: FileCreateManyWithoutTaskInput
  isDone: Boolean!
  Project: ProjectCreateOneWithoutTaskInput
  startTime: DateTime
  taskDetail: String
  taskName: String
}

input TaskCreateWithoutProjectInput {
  comments: CommentCreateManyWithoutTaskInput
  endTime: DateTime!
  files: FileCreateManyWithoutTaskInput
  isDone: Boolean!
  members: TaskOnUserCreateManyWithoutTaskInput
  startTime: DateTime
  taskDetail: String
  taskName: String
}

type TaskOnUser {
  cretedAt: DateTime!
  task: Task!
  user: User!
}

input TaskOnUserCreateManyWithoutTaskInput {
  connect: [TaskOnUserWhereUniqueInput!]
  create: [TaskOnUserCreateWithoutTaskInput!]
}

input TaskOnUserCreateManyWithoutUserInput {
  connect: [TaskOnUserWhereUniqueInput!]
  create: [TaskOnUserCreateWithoutUserInput!]
}

input TaskOnUserCreateWithoutTaskInput {
  cretedAt: DateTime
  user: UserCreateOneWithoutTasksInput!
}

input TaskOnUserCreateWithoutUserInput {
  cretedAt: DateTime
  task: TaskCreateOneWithoutMembersInput!
}

input TaskOnUserScalarWhereInput {
  AND: [TaskOnUserScalarWhereInput!]
  cretedAt: DateTimeFilter
  NOT: [TaskOnUserScalarWhereInput!]
  OR: [TaskOnUserScalarWhereInput!]
  taskId: IntFilter
  userId: IntFilter
}

input TaskOnUserUpdateManyDataInput {
  cretedAt: DateTimeFieldUpdateOperationsInput
}

input TaskOnUserUpdateManyWithoutTaskInput {
  connect: [TaskOnUserWhereUniqueInput!]
  create: [TaskOnUserCreateWithoutTaskInput!]
  delete: [TaskOnUserWhereUniqueInput!]
  deleteMany: [TaskOnUserScalarWhereInput!]
  disconnect: [TaskOnUserWhereUniqueInput!]
  set: [TaskOnUserWhereUniqueInput!]
  update: [TaskOnUserUpdateWithWhereUniqueWithoutTaskInput!]
  updateMany: [TaskOnUserUpdateManyWithWhereNestedInput!]
  upsert: [TaskOnUserUpsertWithWhereUniqueWithoutTaskInput!]
}

input TaskOnUserUpdateManyWithoutUserInput {
  connect: [TaskOnUserWhereUniqueInput!]
  create: [TaskOnUserCreateWithoutUserInput!]
  delete: [TaskOnUserWhereUniqueInput!]
  deleteMany: [TaskOnUserScalarWhereInput!]
  disconnect: [TaskOnUserWhereUniqueInput!]
  set: [TaskOnUserWhereUniqueInput!]
  update: [TaskOnUserUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [TaskOnUserUpdateManyWithWhereNestedInput!]
  upsert: [TaskOnUserUpsertWithWhereUniqueWithoutUserInput!]
}

input TaskOnUserUpdateManyWithWhereNestedInput {
  data: TaskOnUserUpdateManyDataInput!
  where: TaskOnUserScalarWhereInput!
}

input TaskOnUserUpdateWithoutTaskDataInput {
  cretedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutTasksInput
}

input TaskOnUserUpdateWithoutUserDataInput {
  cretedAt: DateTimeFieldUpdateOperationsInput
  task: TaskUpdateOneRequiredWithoutMembersInput
}

input TaskOnUserUpdateWithWhereUniqueWithoutTaskInput {
  data: TaskOnUserUpdateWithoutTaskDataInput!
  where: TaskOnUserWhereUniqueInput!
}

input TaskOnUserUpdateWithWhereUniqueWithoutUserInput {
  data: TaskOnUserUpdateWithoutUserDataInput!
  where: TaskOnUserWhereUniqueInput!
}

input TaskOnUserUpsertWithWhereUniqueWithoutTaskInput {
  create: TaskOnUserCreateWithoutTaskInput!
  update: TaskOnUserUpdateWithoutTaskDataInput!
  where: TaskOnUserWhereUniqueInput!
}

input TaskOnUserUpsertWithWhereUniqueWithoutUserInput {
  create: TaskOnUserCreateWithoutUserInput!
  update: TaskOnUserUpdateWithoutUserDataInput!
  where: TaskOnUserWhereUniqueInput!
}

input TaskOnUserWhereUniqueInput {
  userId_taskId: UserIdTaskIdCompoundUniqueInput
}

input TaskScalarWhereInput {
  AND: [TaskScalarWhereInput!]
  endTime: DateTimeFilter
  id: IntFilter
  isDone: BoolFilter
  NOT: [TaskScalarWhereInput!]
  OR: [TaskScalarWhereInput!]
  projectId: IntNullableFilter
  startTime: DateTimeFilter
  taskDetail: StringNullableFilter
  taskName: StringNullableFilter
}

input TaskUpdateInput {
  comments: CommentUpdateManyWithoutTaskInput
  endTime: DateTimeFieldUpdateOperationsInput
  files: FileUpdateManyWithoutTaskInput
  isDone: BoolFieldUpdateOperationsInput
  members: TaskOnUserUpdateManyWithoutTaskInput
  Project: ProjectUpdateOneWithoutTaskInput
  startTime: DateTimeFieldUpdateOperationsInput
  taskDetail: NullableStringFieldUpdateOperationsInput
  taskName: NullableStringFieldUpdateOperationsInput
}

input TaskUpdateManyDataInput {
  endTime: DateTimeFieldUpdateOperationsInput
  isDone: BoolFieldUpdateOperationsInput
  startTime: DateTimeFieldUpdateOperationsInput
  taskDetail: NullableStringFieldUpdateOperationsInput
  taskName: NullableStringFieldUpdateOperationsInput
}

input TaskUpdateManyWithoutProjectInput {
  connect: [TaskWhereUniqueInput!]
  create: [TaskCreateWithoutProjectInput!]
  delete: [TaskWhereUniqueInput!]
  deleteMany: [TaskScalarWhereInput!]
  disconnect: [TaskWhereUniqueInput!]
  set: [TaskWhereUniqueInput!]
  update: [TaskUpdateWithWhereUniqueWithoutProjectInput!]
  updateMany: [TaskUpdateManyWithWhereNestedInput!]
  upsert: [TaskUpsertWithWhereUniqueWithoutProjectInput!]
}

input TaskUpdateManyWithWhereNestedInput {
  data: TaskUpdateManyDataInput!
  where: TaskScalarWhereInput!
}

input TaskUpdateOneRequiredWithoutMembersInput {
  connect: TaskWhereUniqueInput
  create: TaskCreateWithoutMembersInput
  update: TaskUpdateWithoutMembersDataInput
  upsert: TaskUpsertWithoutMembersInput
}

input TaskUpdateOneWithoutCommentsInput {
  connect: TaskWhereUniqueInput
  create: TaskCreateWithoutCommentsInput
  delete: Boolean
  disconnect: Boolean
  update: TaskUpdateWithoutCommentsDataInput
  upsert: TaskUpsertWithoutCommentsInput
}

input TaskUpdateOneWithoutFilesInput {
  connect: TaskWhereUniqueInput
  create: TaskCreateWithoutFilesInput
  delete: Boolean
  disconnect: Boolean
  update: TaskUpdateWithoutFilesDataInput
  upsert: TaskUpsertWithoutFilesInput
}

input TaskUpdateWithoutCommentsDataInput {
  endTime: DateTimeFieldUpdateOperationsInput
  files: FileUpdateManyWithoutTaskInput
  isDone: BoolFieldUpdateOperationsInput
  members: TaskOnUserUpdateManyWithoutTaskInput
  Project: ProjectUpdateOneWithoutTaskInput
  startTime: DateTimeFieldUpdateOperationsInput
  taskDetail: NullableStringFieldUpdateOperationsInput
  taskName: NullableStringFieldUpdateOperationsInput
}

input TaskUpdateWithoutFilesDataInput {
  comments: CommentUpdateManyWithoutTaskInput
  endTime: DateTimeFieldUpdateOperationsInput
  isDone: BoolFieldUpdateOperationsInput
  members: TaskOnUserUpdateManyWithoutTaskInput
  Project: ProjectUpdateOneWithoutTaskInput
  startTime: DateTimeFieldUpdateOperationsInput
  taskDetail: NullableStringFieldUpdateOperationsInput
  taskName: NullableStringFieldUpdateOperationsInput
}

input TaskUpdateWithoutMembersDataInput {
  comments: CommentUpdateManyWithoutTaskInput
  endTime: DateTimeFieldUpdateOperationsInput
  files: FileUpdateManyWithoutTaskInput
  isDone: BoolFieldUpdateOperationsInput
  Project: ProjectUpdateOneWithoutTaskInput
  startTime: DateTimeFieldUpdateOperationsInput
  taskDetail: NullableStringFieldUpdateOperationsInput
  taskName: NullableStringFieldUpdateOperationsInput
}

input TaskUpdateWithoutProjectDataInput {
  comments: CommentUpdateManyWithoutTaskInput
  endTime: DateTimeFieldUpdateOperationsInput
  files: FileUpdateManyWithoutTaskInput
  isDone: BoolFieldUpdateOperationsInput
  members: TaskOnUserUpdateManyWithoutTaskInput
  startTime: DateTimeFieldUpdateOperationsInput
  taskDetail: NullableStringFieldUpdateOperationsInput
  taskName: NullableStringFieldUpdateOperationsInput
}

input TaskUpdateWithWhereUniqueWithoutProjectInput {
  data: TaskUpdateWithoutProjectDataInput!
  where: TaskWhereUniqueInput!
}

input TaskUpsertWithoutCommentsInput {
  create: TaskCreateWithoutCommentsInput!
  update: TaskUpdateWithoutCommentsDataInput!
}

input TaskUpsertWithoutFilesInput {
  create: TaskCreateWithoutFilesInput!
  update: TaskUpdateWithoutFilesDataInput!
}

input TaskUpsertWithoutMembersInput {
  create: TaskCreateWithoutMembersInput!
  update: TaskUpdateWithoutMembersDataInput!
}

input TaskUpsertWithWhereUniqueWithoutProjectInput {
  create: TaskCreateWithoutProjectInput!
  update: TaskUpdateWithoutProjectDataInput!
  where: TaskWhereUniqueInput!
}

input TaskWhereUniqueInput {
  id: Int
}

type User {
  contacts(after: ContactWhereUniqueInput, before: ContactWhereUniqueInput, first: Int, last: Int): [Contact!]!
  email: String!
  id: Int!
  image: String
  name: String
  position: String
  projects(after: ProjectOnUserWhereUniqueInput, before: ProjectOnUserWhereUniqueInput, first: Int, last: Int): [ProjectOnUser!]!
  skills: [String!]!
  tasks(after: TaskOnUserWhereUniqueInput, before: TaskOnUserWhereUniqueInput, first: Int, last: Int): [TaskOnUser!]!
}

input UserCreateInput {
  comments: CommentCreateManyWithoutUsersInput
  contacts: ContactCreateManyWithoutUserInput
  email: String!
  image: String
  name: String
  position: String
  projects: ProjectOnUserCreateManyWithoutUserInput
  role: Role
  skills: UserCreateskillsInput
  tasks: TaskOnUserCreateManyWithoutUserInput
}

input UserCreateOneWithoutCommentsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCommentsInput
}

input UserCreateOneWithoutContactsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutContactsInput
}

input UserCreateOneWithoutProjectsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutProjectsInput
}

input UserCreateOneWithoutTasksInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutTasksInput
}

input UserCreateskillsInput {
  set: [String!]
}

input UserCreateWithoutCommentsInput {
  contacts: ContactCreateManyWithoutUserInput
  email: String!
  image: String
  name: String
  position: String
  projects: ProjectOnUserCreateManyWithoutUserInput
  role: Role
  skills: UserCreateskillsInput
  tasks: TaskOnUserCreateManyWithoutUserInput
}

input UserCreateWithoutContactsInput {
  comments: CommentCreateManyWithoutUsersInput
  email: String!
  image: String
  name: String
  position: String
  projects: ProjectOnUserCreateManyWithoutUserInput
  role: Role
  skills: UserCreateskillsInput
  tasks: TaskOnUserCreateManyWithoutUserInput
}

input UserCreateWithoutProjectsInput {
  comments: CommentCreateManyWithoutUsersInput
  contacts: ContactCreateManyWithoutUserInput
  email: String!
  image: String
  name: String
  position: String
  role: Role
  skills: UserCreateskillsInput
  tasks: TaskOnUserCreateManyWithoutUserInput
}

input UserCreateWithoutTasksInput {
  comments: CommentCreateManyWithoutUsersInput
  contacts: ContactCreateManyWithoutUserInput
  email: String!
  image: String
  name: String
  position: String
  projects: ProjectOnUserCreateManyWithoutUserInput
  role: Role
  skills: UserCreateskillsInput
}

input UserIdProjectIdCompoundUniqueInput {
  projectId: Int!
  userId: Int!
}

input UserIdTaskIdCompoundUniqueInput {
  taskId: Int!
  userId: Int!
}

input UserUpdateInput {
  comments: CommentUpdateManyWithoutUsersInput
  contacts: ContactUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  position: NullableStringFieldUpdateOperationsInput
  projects: ProjectOnUserUpdateManyWithoutUserInput
  role: Role
  skills: UserUpdateskillsInput
  tasks: TaskOnUserUpdateManyWithoutUserInput
}

input UserUpdateOneRequiredWithoutProjectsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutProjectsInput
  update: UserUpdateWithoutProjectsDataInput
  upsert: UserUpsertWithoutProjectsInput
}

input UserUpdateOneRequiredWithoutTasksInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutTasksInput
  update: UserUpdateWithoutTasksDataInput
  upsert: UserUpsertWithoutTasksInput
}

input UserUpdateOneWithoutCommentsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCommentsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutCommentsDataInput
  upsert: UserUpsertWithoutCommentsInput
}

input UserUpdateOneWithoutContactsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutContactsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutContactsDataInput
  upsert: UserUpsertWithoutContactsInput
}

input UserUpdateskillsInput {
  set: [String!]
}

input UserUpdateWithoutCommentsDataInput {
  contacts: ContactUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  position: NullableStringFieldUpdateOperationsInput
  projects: ProjectOnUserUpdateManyWithoutUserInput
  role: Role
  skills: UserUpdateskillsInput
  tasks: TaskOnUserUpdateManyWithoutUserInput
}

input UserUpdateWithoutContactsDataInput {
  comments: CommentUpdateManyWithoutUsersInput
  email: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  position: NullableStringFieldUpdateOperationsInput
  projects: ProjectOnUserUpdateManyWithoutUserInput
  role: Role
  skills: UserUpdateskillsInput
  tasks: TaskOnUserUpdateManyWithoutUserInput
}

input UserUpdateWithoutProjectsDataInput {
  comments: CommentUpdateManyWithoutUsersInput
  contacts: ContactUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  position: NullableStringFieldUpdateOperationsInput
  role: Role
  skills: UserUpdateskillsInput
  tasks: TaskOnUserUpdateManyWithoutUserInput
}

input UserUpdateWithoutTasksDataInput {
  comments: CommentUpdateManyWithoutUsersInput
  contacts: ContactUpdateManyWithoutUserInput
  email: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  position: NullableStringFieldUpdateOperationsInput
  projects: ProjectOnUserUpdateManyWithoutUserInput
  role: Role
  skills: UserUpdateskillsInput
}

input UserUpsertWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput!
  update: UserUpdateWithoutCommentsDataInput!
}

input UserUpsertWithoutContactsInput {
  create: UserCreateWithoutContactsInput!
  update: UserUpdateWithoutContactsDataInput!
}

input UserUpsertWithoutProjectsInput {
  create: UserCreateWithoutProjectsInput!
  update: UserUpdateWithoutProjectsDataInput!
}

input UserUpsertWithoutTasksInput {
  create: UserCreateWithoutTasksInput!
  update: UserUpdateWithoutTasksDataInput!
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
